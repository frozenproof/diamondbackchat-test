// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id          String     @id @default(uuid())
  userId      String     @unique
  name        String
  imageUrl    String     @db.Text
  email       String     @db.Text
  status      UserStatus @default(ONLINE)
  deleted     Boolean    @default(false)
      
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime  @updatedAt

  servers       Server[]
  members       Member[]
  channels      Channel[]
  messages      Message[]
  BannedServer  BannedServerMember[]
  ServerInvite  ServerInvite[]
}

model Server {
  id          String   @id @default(uuid())
  name        String
  imageUrl    String   @db.Text
  inviteCode  String   @unique

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt  DateTime @updatedAt
  deleted    Boolean  @default(false)

  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  members      Member[]
  channels     Channel[]
  BannedServer BannedServerMember[]
  ServerInvite ServerInvite[]

  @@index([userProfileId])
}

model Member {
  id            String        @id @default(uuid())
  role          OldMemberRole @default(MEMBER)

  userProfileId String
  userProfile   UserProfile   @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  serverId      String
  server        Server        @relation(fields: [serverId], references: [id], onDelete: Cascade)

  nickname      String        @default("")


  @@index([userProfileId])
  @@index([serverId])
}

model Channel {
  id            String          @id @default(uuid())
  name          String
  type          OldChannelType  @default(TEXT)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  serverId      String
  server        Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  deleted       Boolean @default(false)
  messages      Message[]

  @@index([userProfileId])
  @@index([serverId])
}

model BannedServerMember {
  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  deleted     Boolean  @default(false)
  deletedAt   DateTime @updatedAt
  description String   @default("Banned because why not ?")
  assignedAt  DateTime @default(now())
  assignedBy  String

  @@id(name: "banId",[userProfileId, serverId])
}

model ServerInvite {
  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  inviteCode String   @unique
  deleted    Boolean  @default(false)
  deletedAt  DateTime @updatedAt
  assignedAt DateTime @updatedAt
  assignedBy String   @default("User")

  @@id(name: "inviteId",[userProfileId, serverId])
}

model Message {
  id String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  userProfileId String
  userProfile UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([userProfileId])
}

enum OldMemberRole {
  CREATOR
  OWNER
  ADMIN
  MODERATOR
  BOT
  MEMBER
  GUEST
  SPECIALGUEST
  LILWITCH
}

enum OldChannelType {
  TEXT
  DIRECT
  AUDIO
  VIDEO
  STREAMING
  BOT
  NOTIFICATION
}



enum UserStatus {
  ONLINE
  OFFINE
  INVISIBLE
  DO_NOT_DISTURB
  DELETED
  BANNED
}

enum ServerStatus {
  ONLINE
  DELETED
}
