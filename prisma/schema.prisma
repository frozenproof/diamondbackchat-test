// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id       String     @id @default(uuid())
  userId   String     @unique
  name     String
  imageUrl String     @db.Text
  email    String     @db.Text
  status   UserStatus @default(ONLINE)
  deleted  Boolean    @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime @updatedAt

  messages      Message[]
  bannedServers BannedServerMember[]
  serverInvites ServerInvite[]
  UserChannel   UserChannel[]

  Member  Member[]

  Server  Server[]
}

model Server {
  id       String @id @default(uuid())
  name     String
  imageUrl String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: NoAction)

  members       Member[]
  bannedMembers BannedServerMember[]
  serverInvites ServerInvite[]
  ServerChannel ServerChannel[]

  @@index([userProfileId])
}

model Member {
  id   String        @id @default(uuid())
  role OldMemberRole @default(MEMBER)

  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  nickname String @default("")

  @@unique([userProfileId, serverId])
}

model Channel {
  id        String         @id @default(uuid())
  name      String
  type      OldChannelType @default(TEXT)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  deleted Boolean @default(false)

  ServerChannel ServerChannel[]
  UserChannel   UserChannel[]
  Message       Message[]

}

model ServerChannel {
  id        String  @id @default(uuid())
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  serverId  String
  server    Server  @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@unique([serverId, channelId])
}

model UserChannel {
  id            String      @id @default(uuid())
  channelId     String
  channel       Channel     @relation(fields: [channelId], references: [id], onDelete: Cascade)
  userProfileId String      
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: NoAction)

  @@unique([userProfileId, channelId])
}

model BannedServerMember {
  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  deleted     Boolean  @default(false)
  deletedAt   DateTime @updatedAt
  description String   @default("Banned because why not ?")
  assignedAt  DateTime @default(now())
  assignedBy  String

  @@id(name: "banId", [userProfileId, serverId])
}

model ServerInvite {
  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  inviteCode String   @unique
  deleted    Boolean  @default(false)
  deletedAt  DateTime @updatedAt
  assignedAt DateTime @updatedAt
  assignedBy String   @default("User")

  @@id(name: "inviteId", [userProfileId, serverId])
}

model Message {
  id      String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([userProfileId])
}

enum OldMemberRole {
  CREATOR
  OWNER
  ADMIN
  MODERATOR
  BOT
  MEMBER
  GUEST
  SPECIALGUEST
  LILWITCH
}

enum OldChannelType {
  TEXT
  DIRECT
  AUDIO
  VIDEO
  STREAMING
  BOT
  NOTIFICATION
}

enum UserStatus {
  ONLINE
  OFFINE
  INVISIBLE
  DO_NOT_DISTURB
  DELETED
  BANNED
}

enum ServerStatus {
  ONLINE
  DELETED
}
