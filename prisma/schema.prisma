// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id       String     @id @default(uuid())
  userId   String     @unique
  name     String     @default("Deleted")
  imageUrl String     @db.Text
  email    String     @db.Text
  about    String     @default("") @db.Text
  status   UserStatus @default(ONLINE)
  deleted  Boolean    @default(false)

  createdAt DateTime @default(now())

  bannedServers BannedServerMember[]
  serverInvites ServerInvite[]

  Member Member[]

  Server            Server[]
  DirectMessage     DirectMessage[]
  DirectChannelSend DirectChannel[] @relation("UserOne")
  DirectChannelRepl DirectChannel[] @relation("UserTwo")
  FriendOne         Friend[]        @relation("UserOne")
  FriendTwo         Friend[]        @relation("UserTwo")
  BlockerAway       Block[]         @relation("UserOne")
  BlockedOut        Block[]         @relation("UserTwo")
}

model Server {
  id       String @id @default(uuid())
  name     String
  imageUrl String @db.Text

  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  userProfileId String      @default("Deleted")
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: SetDefault)

  Member Member[]

  BannedServerMember BannedServerMember[]
  ServerInvite       ServerInvite[]
  Channel            Channel[]

  @@index([userProfileId])
}

model Member {
  id        String        @id @default(uuid())
  role      OldMemberRole @default(MEMBER)
  deleted   Boolean       @default(false)        

  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  nickname String    @default("")
  Message  Message[]

  @@unique([userProfileId, serverId])
}

model Channel {
  id        String         @id @default(uuid())
  name      String
  type      OldChannelType @default(TEXT)
  updatedAt DateTime       @updatedAt

  categories String
  deleted    Boolean @default(false)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  Message    Message[]
  Attachment AttachmentChannel[]
}

model DirectChannel {
  id String @id @default(uuid())

  deleted Boolean @default(false)

  memberOneId String
  memberOne   UserProfile @relation("UserOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo   UserProfile @relation("UserTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  DirectMessage DirectMessage[]

  AttachmentDirect AttachmentDirect[]

  @@unique([memberOneId, memberTwoId])
}

model BannedServerMember {
  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  count       Int
  description String   @default("DefaultBanned ")
  assignedAt  DateTime @default(now())
  assignedBy  String

  @@id(name: "banId", [userProfileId, serverId])
}

model ServerInvite {
  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  inviteCode String   @unique
  deleted    Boolean  @default(false)
  assignedAt DateTime @updatedAt

  @@id(name: "inviteId", [userProfileId, serverId])
}

model Message {
  id      String @id @default(uuid())
  content String @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  hasAttachment Boolean @default(false)
  deleted       Boolean @default(false)

  isReply          Boolean
  repliedMessageid String  @default("")

  pinned    Boolean  @default(false)
  edited    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  AttachmentChannel AttachmentChannel[]

  @@index([channelId])
  @@index([memberId])
}

model DirectMessage {
  id      String @id @default(uuid())
  content String @db.Text

  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  hasAttachment Boolean @default(false)
  deleted       Boolean @default(false)

  isReply          Boolean
  repliedMessageid String  @default("")

  pinned    Boolean  @default(false)
  edited    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  AttachmentDirect AttachmentDirect[]
  DirectChannel    DirectChannel?     @relation(fields: [directChannelId], references: [id])
  directChannelId  String?

  @@index([directChannelId])
  @@index([userProfileId])
}

model AttachmentChannel {
  id      String @id @default(uuid())
  fileUrl String @db.Text
  name    String @db.Text
  type    String

  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([channelId])
  @@index([messageId])
}

model AttachmentDirect {
  id      String @id @default(uuid())
  fileUrl String @db.Text
  name    String @db.Text
  type    String

  directMessageId String
  directMessage   DirectMessage @relation(fields: [directMessageId], references: [id], onDelete: Cascade)

  directChannelId String
  directChannel   DirectChannel @relation(fields: [directChannelId], references: [id], onDelete: Cascade)

  @@index([directChannelId])
  @@index([directMessageId])
}

model Friend {
  id      String  @id @default(uuid())
  pending Boolean @default(false)

  updatedAt DateTime @updatedAt

  friendOneId String      @map("friendOneId")
  friendOne   UserProfile @relation("UserOne", fields: [friendOneId], references: [id], onDelete: Cascade)

  friendTwoId String      @map("friendTwoId")
  friendTwo   UserProfile @relation("UserTwo", fields: [friendTwoId], references: [id], onDelete: Cascade)

  @@unique(name: "friendId",[friendOneId, friendTwoId])
  @@index([id])
}

model Block {
  id String @id @default(uuid())

  updatedAt DateTime @updatedAt

  blockerId   String      @map("blockerId")
  blockerAway UserProfile @relation("UserOne", fields: [blockerId], references: [id], onDelete: Cascade)

  blockedId  String      @map("blockedId")
  blockedOut UserProfile @relation("UserTwo", fields: [blockedId], references: [id], onDelete: Cascade)

  @@index([id])
  @@unique(name: "blockId",[blockerId,blockedId])
}

model Maintainence {
  id         String   @id @default(uuid())
  isOffline  Boolean  @default(false)
  lastUpdate DateTime @default(now())

  @@index([id])
}

enum OldMemberRole {
  CREATOR
  OWNER
  ADMIN
  MODERATOR
  BOT
  MEMBER
  GUEST
  SPECIALGUEST
  LILWITCH
}

enum OldChannelType {
  TEXT
  AUDIO
  VIDEO
  NOTIFICATION
}

enum UserStatus {
  ONLINE
  OFFINE
  INVISIBLE
  IDLE
  DO_NOT_DISTURB
  DELETED
  BANNED
}

enum ServerStatus {
  ONLINE
  DELETED
}
