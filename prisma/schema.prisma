// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id            String      @id @default(uuid())
  userId        String      @unique
  name          String      @default("Cattus")
  imageUrl      String      @db.Text
  email         String      @db.Text
  status        UserStatus  @default(ONLINE)
  deleted       Boolean     @default(false)

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  messages      Message[]
  bannedServers BannedServerMember[]
  serverInvites ServerInvite[]
  UserChannel   UserChannel[]

  Member        Member[]

  Server        Server[]
  Friend        Friend[]
}

model Server {
  id                String    @id @default(uuid())
  name              String
  imageUrl          String    @db.Text

  updatedAt         DateTime  @updatedAt
  deleted           Boolean   @default(false)

  userProfileId     String    @default("Deleted")
  userProfile       UserProfile @relation(fields: [userProfileId], references: [id], onDelete: SetDefault)

  Member             Member[]
  ServerChannel      ServerChannel[]
  BannedServerMember BannedServerMember[]
  ServerInvite       ServerInvite[]

  @@index([userProfileId])
}

model Member {
  id   String        @id @default(uuid())
  role OldMemberRole @default(MEMBER)

  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  nickname String @default("")

  @@unique([userProfileId, serverId])
}

model Channel {
  id            String         @id @default(uuid())
  name          String
  type          OldChannelType @default(TEXT)
  updatedAt     DateTime       @updatedAt

  deleted       Boolean        @default(false)

  ServerChannel ServerChannel[]
  UserChannel   UserChannel[]
  Message       Message[]
  Attachment    Attachment[]
}

model ServerChannel {
  id        String  @id @default(uuid())
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  serverId  String
  server    Server  @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@unique([serverId, channelId])
}

model UserChannel {
  id        String  @id @default(uuid())
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  userProfile UserProfile[]

  @@unique([channelId])
}

model BannedServerMember {
  userProfileId   String
  userProfile     UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  serverId        String
  server          Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)

  count           Int       
  description     String      @default("Banned because why not ?")
  assignedAt      DateTime    @default(now())
  assignedBy      String

  @@id(name: "banId", [userProfileId, serverId])
}

model ServerInvite {
  userProfileId       String
  userProfile         UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  serverId            String
  server              Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  inviteCode          String   @unique
  deleted             Boolean  @default(false)
  assignedAt          DateTime @updatedAt

  @@id(name: "inviteId", [userProfileId, serverId])
}

model Message {
  id      String @id @default(uuid())
  content String @db.Text

  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  attachment Boolean @default(false)
  deleted    Boolean @default(false)

  updatedAt DateTime @updatedAt

  Attachment Attachment[]

  @@index([channelId])
  @@index([userProfileId])
}

model Attachment {
  id      String @id @default(uuid())
  fileUrl String @db.Text

  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([channelId])
  @@index([messageId])
}

model Friend  {
  id          String  @id @default(uuid())
  blocked     Boolean @default(false)

  updatedAt   DateTime @updatedAt

  userProfile UserProfile[]
  
  @@index([id])
}

enum OldMemberRole {
  CREATOR
  OWNER
  ADMIN
  MODERATOR
  BOT
  MEMBER
  GUEST
  SPECIALGUEST
  LILWITCH
}

enum OldChannelType {
  TEXT
  DIRECT
  AUDIO
  VIDEO
  STREAMING
  BOT
  NOTIFICATION
}

enum UserStatus {
  ONLINE
  OFFINE
  INVISIBLE
  DO_NOT_DISTURB
  DELETED
  BANNED
}

enum ServerStatus {
  ONLINE
  DELETED
}
